JAVA LESSONS
Lesson CreatingObjects,
Inside static Initializer Block, field, cStatic=static initializer, always FIRST
Lesson ClassInitialization, A, stStr=stat.Str
Lesson ClassInitialization, B
Lesson ClassInitialization, C
1. Block, field cPrivate=setting field
1. Block, field cStatic=static initializer, always FIRST
2. Block, field cPrivate=block
2. Block, field cStatic=block
constructor, always the last, cPrivate=constructor
constructor, always the last, cStatic=constructor
Lesson InstanceInitialization, Constructor, InstanceA
Lesson InstanceInitialization, Constructor, InstanceA
Lesson InstanceInitialization, Constructor, InstanceB
Lesson InstanceInitialization, Constructor, InstanceA
Lesson InstanceInitialization, Constructor, InstanceB
Lesson InstanceInitialization, Constructor, InstanceC
Lesson SuperCons, first()
Lesson SuperCons, second()

===============================================================
Lesson#1 11.00.001.HelloWorld
===============================================================
Hello World!

===============================================================
Lesson#2 11.00.002.Version
===============================================================
11.0.16

===============================================================
Lesson#3 11.01.001.WelcomeToJava
===============================================================
random 0-9: 0
java.utl.Date: Fri Nov 04 22:56:21 CET 2022
java.sql.Date: 1970-01-01
ivanbasic.FieldsAndMethodsCanGoInEitherOrder@7d70d1b1

===============================================================
Lesson#4 11.02.001.CreatingObjects
===============================================================
Creating Objects. Order of Initialization
1. Block, field cPrivate=setting field
1. Block, field cStatic=constructor
2. Block, field cPrivate=block
2. Block, field cStatic=block
constructor, always the last, cPrivate=constructor
constructor, always the last, cStatic=constructor

===============================================================
Lesson#5 11.02.002.ThePrimitiveTypes
===============================================================
MIN_VALUE MAX_VALUE

boolean false   true
byte 	-128   127 =2^6.988684686772166
short 	-32768   32767 =2^14.999955971769559
int 	-2147483648   2147483647 =2^30.999999999328196
long 	-9223372036854775808   9223372036854775807 =2^63.0
float 	1.4E-45   3.4028235E38
double 	4.9E-324   1.7976931348623157E308
char    0   65535

BYTES

boolean -
byte 	1
short 	2
int 	4
long 	8
float 	4
double 	8
char    2

===============================================================
Lesson#6 11.02.003.Literals
===============================================================
By default, Java assumes you are defining an int value with a numeric literal
10.0 - Java assumes you are defining an double?  YES
Integer as bin, oct, hex:
15
15
15
Literals and the Underscore Character

===============================================================
Lesson#7 11.02.004.PrimitivesAgain
===============================================================

char
char 65=A

boolean

byte

short

short again
 (short) 32767+1 = -32768

int
2147483647+2147483647=-2

long
max+max, lo=-2
max-1, lo=9223372036854775806

float
3.4028235E38+3.4028235E38=Infinity
Infinity-1=Infinity
Infinity-Infinity=NaN

double
1.7976931348623157E308+1.7976931348623157E308=Infinity

===============================================================
Lesson#8 11.02.010.ReferenceTypes
===============================================================
Fri Nov 04 22:56:22 CET 2022
How are you?
null

===============================================================
Lesson#9 11.02.020.var
===============================================================
Only local variabes, declared and initialized, only one by one.

===============================================================
Lesson#10 11.02.030.Defaults
===============================================================
classString=null
classInt=0
instanceString=null
instanceInt=0
instanceBoolean=false
instanceFloat=0.0
instanceDouble=0.0

===============================================================
Lesson#11 11.03.001.Operators
===============================================================
Nothing new

===============================================================
Lesson#12 11.04.000.MakingDecisions
===============================================================
0, 0, 0
1, -2, 3
2, -4, 6
3, -6, 9
4, -8, 12

===============================================================
Lesson#13 11.04.010.BreakAndContinue
===============================================================

CONTINUE ON 3: 1 2 (skip the rest of current iteration) 4 5 6 7 8 9 10
BREAK ON 3: 1 2 (Leave the loop)

===============================================================
Lesson#14 11.05.010.Strings
===============================================================
01234567890123
length=14
charAt(0)=0
charAt(6)=6
indexOf('0')=0
indexOf('0',10)=10
indexOf('0',12)=-1
indexOf('890' )=8
substring(0  )=01234567890123
substring(2,5  )=234
startsWith("0123"  )=true
endsWith("123"  )=true
replace( "12", ".."  )=0..34567890..3

"  СРЕДИНА  "
trim(str  )=СРЕДИНА
strip(str  )=СРЕДИНА

===============================================================
Lesson#15 11.05.020.StringBuilder
===============================================================
abcdefghijklmnopqrstuvwxyz

abc


===============================================================
Lesson#16 11.05.030.TheStringPool
===============================================================
true

===============================================================
Lesson#17 11.05.040.Arrays
===============================================================
[42, -55, 99]
[[10, 20], [100, -200]]

===============================================================
Lesson#18 11.05.041.ArraysRowsAndCols
===============================================================
Declare and populate...
Result
[[11, 12, 13, 14, 15, 16, 17, 18]
[21, 22, 23, 24, 25, 26, 27, 28]
[31, 32, 33, 34, 35, 36, 37, 38]
[41, 42, 43, 44, 45, 46, 47, 48]
[51, 52, 53, 54, 55, 56, 57, 58]]

Sum of rows
Sumiranje po redovima
116
196
276
356
436
=1380

Sum of cols
Sumiranje po kolonama
155
160
165
170
175
180
185
190
=1380

===============================================================
Lesson#19 11.05.050.ArrayList
===============================================================
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
ArrayList implements an interface called List
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
Using Varargs to Create a List
[new]
[one, two]

===============================================================
Lesson#20 11.05.060.Sets
===============================================================
Set of Integer's
true
false
true
false
2
[1, 2]

Set of Anything's
true
true
true
[ivanbasic.Anything@4fb64261, ivanbasic.Anything@18bf3d14, ivanbasic.Anything@42607a4f]

Set of Something's, overrides java.lang.Object.hashCode, overrides java.lang.Object.equals
true
false
true
false
[1, 2]

===============================================================
Lesson#21 11.05.070.Maps
===============================================================
koala bamboo
cat bird
cow grass
{koala=bamboo, cat=bird, cow=grass}
{ivanbasic.AnythingAgain@1786f9d5=202, ivanbasic.AnythingAgain@10dba097=102}

===============================================================
Lesson#22 11.06.010.Lambdas
===============================================================
TraditionalSearch, print if Hopper
kangaroo rabbit

Lambda Search, print if Hopper
kangaroo rabbit
Lambda Search, print can Swim
fish turtle
Lambda Search, print can't Swim
kangaroo rabbit

LambdaSearchTwo, print if Hopper
kangaroo rabbit

===============================================================
Lesson#23 11.06.020.Predicate
===============================================================
fish me
fish me
fish me

===============================================================
Lesson#24 11.06.030.Consumer
===============================================================
The Consumer functional interface: void accept(T t)
1
accepting *2
accepting *2
accepting *2
8
accepting *3
24
accepting more *7, *8
1344

===============================================================
Lesson#25 11.06.040.Supplier
===============================================================
random #1 = 3
random #2 = 0
random #3 = 3
random #4 = 4
random #5 = 0

===============================================================
Lesson#26 11.06.050.Comparator
===============================================================
Compare 11 & 17 :-6

===============================================================
Lesson#27 11.06.060.CallingAPIsWithLambdas
===============================================================
List and Set declare a removeIf() method that takes a Predicate (boolean)
[long ear, floppy, hoppy]
[hoppy]

sort (int)
[long ear, floppy, hoppy, a, z]
[a, floppy, hoppy, long ear, z]
and reverse:
[z, long ear, hoppy, floppy, a]

forEach(), Consumer, void accept(T t)
long ear
floppy
hoppy

===============================================================
Lesson#28 11.07.030.WorkingWithVarargs
===============================================================
walk(int start, int... nums), length of nums:
0
1
2
2

===============================================================
Lesson#29 11.07.050.PassingDataAmongMethods
===============================================================
int       parInt	=1
String    parString	=a
int[]     parArray	=[1, 2]
SomeClass parClass	=2
passing data among methods... PassingWithoutChange
int       parInt	=1
String    parString	=a
int[]     parArray	=[1, 2]
SomeClass parClass	=2
passing data among methods... PassingWithChange
int       parInt	=1
String    parString	=a
int[]     parArray	=[12345678, 2]
SomeClass parClass	=9999999

===============================================================
Lesson#30 11.07.070.OverloadingMethods
===============================================================
142
===============================================================
Lesson#31 11.07.090.EncapsulatingData
===============================================================
Just private, getter & setter

===============================================================
Lesson#32 11.08.010.This
===============================================================
The color is desolate

===============================================================
Lesson#33 11.08.020.Super
===============================================================
child doIt
parent doIt
child size
parent size

===============================================================
Lesson#34 11.08.021.Extends
===============================================================
this:
Chicken field1
Chicken field2
3
Chicken method1
Chicken method2

super:
Egg field1
Egg field2
Egg field3
Egg method1
Egg method2

===============================================================
Lesson#35 11.08.025.ConsCallsConsThis
===============================================================
Cons II 1 0
CONS I
Cons II 1 2

===============================================================
Lesson#36 11.08.030.PrivateConstructor
===============================================================
Calling private constructor 789+AAAAAA
...from public cons
Calling private constructor 11111+XYZUV
...from public cons
from (static) method:
Calling private constructor 45+MN

===============================================================
Lesson#37 11.08.035.SuperCons
===============================================================
Lesson SuperCons, first()
Lesson SuperCons, second()

Lesson SuperCons, first()
second(int) calls super()=first() without arguments!

===============================================================
Lesson#38 11.08.100.ClassInitialization
===============================================================

===============================================================
Lesson#39 11.08.110.InstanceInitialization
===============================================================
Creating new InstanceC extends InstanceB extends InstanceA
Lesson InstanceInitialization, Constructor, InstanceA
Lesson InstanceInitialization, Constructor, InstanceB
Lesson InstanceInitialization, Constructor, InstanceC

===============================================================
Lesson#40 11.08.500.OverridingMethod
===============================================================
Number Of Humps = 1
Number Of Humps = 2
Number Of Humps = 2

===============================================================
Lesson#41 11.08.510.OverridingGenericMethod
===============================================================
Anteater

===============================================================
Lesson#42 11.08.520.GenericReturnTypes
===============================================================

===============================================================
Lesson#43 11.08.530.RedeclaringPrivateMethods
===============================================================
private doIt, PrivateAny.
private doIt, PrivateRyan. A Separate and independent method. Not an overridden version.

===============================================================
Lesson#44 11.08.540.HidingStaticMethods
===============================================================
You can't mix static and non-static methods
public static void doIt() Bear
public static void doIt() Panda. >>Hiding<<. Tis is not considered an overridden method.

===============================================================
Lesson#45 11.08.900.ReviewQuestions
===============================================================
50
SpiderSpiderArthropod
tacbf

abcdef

Child method setName=Webby
Child method setName=Olivia
Olivia Sophia


Class1 c11 ivanbasic.Class1@10d59286
method doIt Class1
instanceVariable Class1

Class1 c12 ivanbasic.Class2@fe18270
method doIt Class2
instanceVariable Class1

Class2 c22 ivanbasic.Class2@6fb0d3ed
method doIt Class2
instanceVariable Class2

casting c22....
Class1 c100 ivanbasic.Class2@6fb0d3ed
method doIt Class2
instanceVariable Class1


===============================================================
Lesson#46 11.09.100.AbstractClasses
===============================================================
Constructor AbstractSub0 ivanbasic.Concrete0@6dde5c8c
Constructor AbstractSub0 ivanbasic.Concrete1@5123a213

===============================================================
Lesson#47 11.09.200.Interfaces
===============================================================
doIt is implemented.
default method
static method
static field of TheInterface
interface ti instanceof class ChildOf? true

===============================================================
Lesson#48 11.09.900.ReviewQuestions
===============================================================

===============================================================
Lesson#49 11.10.100.Exceptions
===============================================================

===============================================================
Lesson#50 11.10.200.Exceptions
===============================================================
try 2
finally 2
try 11
catch 11
finally 11

try 11
finally 11

the compiler replaces a try-with-resources block with a try and finally block
This catch block is optional
This finally block is optional

===============================================================
Lesson#51 11.10.300.Exceptions
===============================================================
Without trow
1
In return line, -1
3
In return line, -3
Returned -3



With trow
2
In return line, -2
3
In return line, -3
Returned -3

===============================================================
Lesson#52 11.11.100.Modules
===============================================================
eclipse: project root >configure>create module-info.java

exports pckg (to  mdl)
requires, requires transitive mdl

===============================================================
Lesson#53 11.21.100.Enums
===============================================================
SUMMER 2

WINTER 0
SPRING 1
SUMMER 2
FALL 3


===============================================================
Lesson#54 11.21.110.UsingEnumsInSwitchStatements
===============================================================
default

===============================================================
Lesson#55 11.21.120.EnumConstructor
===============================================================
the constructor argument list match the declaration-of-constants argument list.
but Selikoff didn't explain why

===============================================================
Lesson#56 11.21.200.NestedClasses4Flavors
===============================================================
constructor Outer, str=out, class=ivanbasic.Outer@15b3e5b
constructor Inner, str=non-static-inn, class=ivanbasic.Outer$Inner@61ca2dfa
constructor Inner, str=non-static-inn, class=ivanbasic.Outer$Inner@4b53f538
constructor StaticInner, str=static inn, class=ivanbasic.Outer$StaticInner@134593bf
constructor StaticInner, str=static inn, class=ivanbasic.Outer$StaticInner@4bb4de6a
Outer method doIt
constructor Local, str=class-Local-in-method-doIt, class=ivanbasic.Outer$1Local@7ba18f1b
constructor AbsInner, str=absin, class=ivanbasic.Outer$1@2f8f5f62

===============================================================
Lesson#57 11.21.300.InterfaceDefaultMethod
===============================================================
cat as run, speed=7
cat as walk, speed=7
cats inherited walk speed=5
cats inherited run speed=10

===============================================================
Lesson#58 11.21.400.InterfaceStaticMethod
===============================================================
Bunny, hop height=8

===============================================================
Lesson#59 11.21.500.InterfacePrivatecMethod
===============================================================

Monday
You have 10 hours left to make the appointment
You have 8 hours left to make the appointment
You have 5 hours left to make the appointment
You're late!

Saturday
skip wakeup
skip breakfast
You have 5 hours left to make the appointment
You're late!

===============================================================
Lesson#60 11.21.600.InterfacePrivatecStaticMethod
===============================================================

Inhale
Performing stroke: backstroke
Exhale

Inhale
Performing stroke: freestyle
Exhale

Inhale
Performing stroke: butterfly
Exhale

===============================================================
Lesson#61 11.21.700.IntroducingFunctionalProgramming
===============================================================
Same as chapter 6

===============================================================
Lesson#62 11.22.100.Annotations
===============================================================

class annotations
@ivanbasic.Hazard(description="Wind Damage", danger=100)
@ivanbasic.Alert()

all fields annotations
@ivanbasic.Ordinary() for public int ivanbasic.Tornado.t1
@ivanbasic.Ordinary() for public static int ivanbasic.Tornado.t2
@ivanbasic.Ordinary() for private int[] ivanbasic.Tornado.t3
@ivanbasic.Special() for private int[] ivanbasic.Tornado.t3

===============================================================
Lesson#63 11.23.000.FunctionalInterface3Ways
===============================================================
1. using class      :ivanbasic.SpeakUsingClass@32cf48b7
2. using lambda     :ivanbasic.java_11_23_000_FunctionalInterface3Ways$$Lambda$49/0x000000080012e440@679b62af
3. method reference :ivanbasic.java_11_23_000_FunctionalInterface3Ways$$Lambda$50/0x000000080012f840@5cdd8682

===============================================================
Lesson#64 11.23.100.UsingMethodReferences4formats
===============================================================
Static methods
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$51/0x000000080012fc40@45afc369
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$52/0x000000080012f040@49c43f4e

Instance methods on a particular instance
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$53/0x000000080012f440@12028586
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$54/0x000000080012e840@69a10787

Instance methods on a parameter to be determined at runtime
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$55/0x000000080012ec40@2bbaf4f0
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$56/0x0000000800140040@70beb599

Constructors
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$57/0x0000000800140440@32a068d1
ivanbasic.java_11_23_100_UsingMethodReferences4formats$$Lambda$58/0x0000000800140840@365c30cc

===============================================================
Lesson#65 11.23.200.UsingTheDiamondOperator
===============================================================

===============================================================
Lesson#66 11.23.300.ListAndLambda
===============================================================
[1, 2, 3, 4, 5]
[2, 4, 6, 8, 10]

===============================================================
Lesson#67 11.23.400.WorkingWithGenerics
===============================================================

===============================================================
Lesson#68 11.23.500.Wildcard
===============================================================

===============================================================
Lesson#69 11.24.100.BuiltInFunctionalInterfaces
===============================================================
Annie
true
true
5
5
CHIRP
CHIRP

ivanbasic.java_11_24_100_BuiltInFunctionalInterfaces$$Lambda$60/0x0000000800141040@77be656f
ivanbasic.java_11_24_100_BuiltInFunctionalInterfaces$$Lambda$64/0x0000000800147c40@19dc67c2
ivanbasic.java_11_24_100_BuiltInFunctionalInterfaces$$Lambda$66/0x0000000800147440@221af3c0
ivanbasic.java_11_24_100_BuiltInFunctionalInterfaces$$Lambda$68/0x0000000800146c40@62bd765
ivanbasic.java_11_24_100_BuiltInFunctionalInterfaces$$Lambda$70/0x0000000800146440@23a5fd2

===============================================================
Lesson#70 11.24.101.CommonFunctionalInterfaces
===============================================================
integers=[10, 7, 15, 3, 30, 4, 40, 15, 100]

USING IN STREAMS:
Predicate, filter(). evenIntegers=[10, 30, 4, 40, 100]
Consumer, forEach(). printAll=10 7 15 3 30 4 40 15 100
Comparator, sorted(). sortedInts=[3, 4, 7, 10, 15, 15, 30, 40, 100]
BinaryOperator , reduce(). sum=224
Function, map(). IntToStr=[<10>, <7>, <15>, <3>, <30>, <4>, <40>, <15>, <100>]
Unary operator, map, toSquare=[100, 49, 225, 9, 900, 16, 1600, 225, 10000]

===============================================================
Lesson#71 11.24.200.ReturningAnOptional
===============================================================
false
true
23

true
false


op1: 23
op2 is empty

===============================================================
Lesson#72 11.24.300.FiniteStreams
===============================================================
java.util.stream.ReferencePipeline$Head@4d339552
java.util.stream.ReferencePipeline$Head@f0f2775
java.util.stream.ReferencePipeline$Head@5a4aa2f2
java.util.stream.ReferencePipeline$Head@6591f517
java.util.stream.ReferencePipeline$Head@345965f2

===============================================================
Lesson#73 11.24.400.InfiniteStreams
===============================================================
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50

===============================================================
Lesson#74 11.24.500.UsingCommonTerminalOperations
===============================================================
FINITY
forEach: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49
count: 25
min : 1
max : 49
findAny : 1
anyMatch : true
reduce : 625
filer : 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39
map : (1) (3) (5) (7) (9) (11) (13) (15) (17) (19) (21) (23) (25) (27) (29) (31) (33) (35) (37) (39) (41) (43) (45) (47) (49)
skip limit forEach : 7 9 11 13


INFINITY
skip limit forEach : 7 9 11 13

end

===============================================================
Lesson#75 11.24.600.PrimitiveStreams
===============================================================
intStream.average()=4.5

===============================================================
Lesson#76 11.24.700.AdvancedStreamPipelineConcepts
===============================================================

===============================================================
Lesson#77 11.25.100.Exceptions
===============================================================
try 1
 catch ivanbasic.ExceptionPink
 finaly 1
try 2
 catch ivanbasic.ExceptionYellow
 finaly 2
try 3
 catch ivanbasic.ExceptionYellow
 finaly 3
try 4
 finaly 4
try 5
 finaly 5
try 6
 finaly 6
try 7
 catch ivanbasic.ExceptionYellow
 finaly 7
try 8
 catch ivanbasic.ExceptionYellow
 finaly 8
try 9
 finaly 9

===============================================================
Lesson#78 11.25.200.TryWithResources
===============================================================
Open monkey
Try Block
Closed: monkey
Finally Block

multiple resources:
Open 1
Open 2
Open 3
Try Block
Closed: 3
Closed: 2
Closed: 1
Finally Block

===============================================================
Lesson#79 11.25.300.DeclaringAssertions
===============================================================

===============================================================
Lesson#80 11.25.400.WorkingWithDatesAndTimes
===============================================================
2022-11-04
22:56:22.186664300
2022-11-04T22:56:22.186664300
19.04.2020 21:23

===============================================================
Lesson#81 11.27.100.Concurrency
===============================================================
1 implementing interface Runnable
Runnable r2
2 extending class Thread
Runnable r3
3 Executors
java.util.concurrent.ThreadPoolExecutor@1a84f40f[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
java.util.concurrent.Executors$FinalizableDelegatedExecutorService@23282c25
shutdown Executors
While  Executors
sleep  10
ivanbasic.ImlementedRunable@24b0c1af
sleep  10
sleep  10
sleep  20
ivanbasic.ImlementedRunable@24b0c1af
ivanbasic.ImlementedRunable@24b0c1af
Thread[Thread-4,5,main]
sleep  30
sleep  30
sleep  30
sleep  50
service 1 while !isTerminated
sleep  50
service 2 while !isTerminated
--- END ---

===============================================================
Lesson#82 11.27.200.SubmitAndFuture
===============================================================
java.util.concurrent.Executors$FinalizableDelegatedExecutorService@3d299e3
java.util.concurrent.FutureTask@657c8ad9[Not completed, task = java.util.concurrent.Executors$RunnableAdapter@6295d394[Wrapped task = ivanbasic.java_11_27_200_SubmitAndFuture$$Lambda$121/0x0000000800169040@475e586c]]
service3 !-null,   shutdown
lambda runable

===============================================================
Lesson#83 11.27.300.Synchronization
===============================================================

...............2
.....................................3
................................4
.................................................................................................5
...........................................................................6
7
8

..........................10
.
===============================================================
Lesson#84 11.27.400.UsingConcurrentCollections
===============================================================

===============================================================
Lesson#85 11.27.500.WorkingWithParallelStreams
===============================================================
3 2 8 6 4 5 9 1 7
Time: 0.33 seconds

===============================================================
Lesson#86 11.28.100.IOAbstract
===============================================================

===============================================================
Lesson#87 11.28.200.IOConcrete
===============================================================

===============================================================
Lesson#88 11.29.100.NIO2
===============================================================
.git
.gitignore
.idea
CONSOLE.txt
JAVA_NAMING_CONVENTIONS.txt
lj2022.iml
out
README.txt
src

===============================================================
Lesson#89 11.29.101.Recursively
===============================================================
src
src\ivanbasic

===============================================================
Lesson#90 11.30.100.JDBC
===============================================================

===============================================================
Lesson#91 11.31.100.Security
===============================================================
Limiting Accessibility: private fields instead of public
Restricting Extensibility: final class
Creating Immutable Objects: final class, private final fields, without setters, just constructors...
Cloning Objects
Sql Injection, Whitelist vs. Blacklist...
Confidential Information...

Process finished with exit code 0
